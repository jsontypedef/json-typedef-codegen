# Code generated by jtd-codegen for Ruby v0.1.1

require 'json'
require 'time'

module JTDCodegenE2E

  class Root
    attr_accessor :default_name
    attr_accessor :foo
    attr_accessor :foo0
    attr_accessor :foo1
    attr_accessor :foo_bar
    attr_accessor :foo_bar0
    attr_accessor :foo0bar
    attr_accessor :foo_bar1

    def self.from_json_data(data)
      out = Root.new
      out.default_name = JTDCodegenE2E::from_json_data(String, data[""])
      out.foo = JTDCodegenE2E::from_json_data(String, data["$foo"])
      out.foo0 = JTDCodegenE2E::from_json_data(String, data["0foo"])
      out.foo1 = JTDCodegenE2E::from_json_data(String, data["_foo"])
      out.foo_bar = JTDCodegenE2E::from_json_data(String, data["foo\nbar"])
      out.foo_bar0 = JTDCodegenE2E::from_json_data(String, data["foo bar"])
      out.foo0bar = JTDCodegenE2E::from_json_data(String, data["foo0bar"])
      out.foo_bar1 = JTDCodegenE2E::from_json_data(String, data["foo﷽bar"])
      out
    end

    def to_json_data
      data = {}
      data[""] = JTDCodegenE2E::to_json_data(default_name)
      data["$foo"] = JTDCodegenE2E::to_json_data(foo)
      data["0foo"] = JTDCodegenE2E::to_json_data(foo0)
      data["_foo"] = JTDCodegenE2E::to_json_data(foo1)
      data["foo\nbar"] = JTDCodegenE2E::to_json_data(foo_bar)
      data["foo bar"] = JTDCodegenE2E::to_json_data(foo_bar0)
      data["foo0bar"] = JTDCodegenE2E::to_json_data(foo0bar)
      data["foo﷽bar"] = JTDCodegenE2E::to_json_data(foo_bar1)
      data
    end
  end

  private

  def self.from_json_data(type, data)
    if data.nil? || [Object, TrueClass, Integer, Float, String].include?(type)
      data
    elsif type == DateTime
      DateTime.rfc3339(data)
    elsif type.is_a?(Array)
      data.map { |elem| from_json_data(type.first, elem) }
    elsif type.is_a?(Hash)
      data.transform_values { |elem| from_json_data(type.values.first, elem) }
    else
      type.from_json_data(data)
    end
  end

  def self.to_json_data(data)
    if data.nil? || [TrueClass, FalseClass, Integer, Float, String].include?(data.class)
      data
    elsif data.is_a?(DateTime)
      data.rfc3339
    elsif data.is_a?(Array)
      data.map { |elem| to_json_data(elem) }
    elsif data.is_a?(Hash)
      data.transform_values { |elem| to_json_data(elem) }
    else
      data.to_json_data
    end
  end
end
