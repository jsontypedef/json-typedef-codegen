# Code generated by jtd-codegen for Ruby v0.2.0

module JtdCodegenE2e

  class Root
    attr_accessor :value

    def self.from_json(data)
      out = Root.new
      out.value = JtdCodegenE2e.from_json(Foo, data)
      out
    end

    def to_json
      JtdCodegenE2e.to_json(value)
    end
  end

  class Bar
    attr_accessor :value

    def self.from_json(data)
      out = Bar.new
      out.value = JtdCodegenE2e.from_json(Baz, data)
      out
    end

    def to_json
      JtdCodegenE2e.to_json(value)
    end
  end

  class Baz
    attr_accessor :value

    def self.from_json(data)
      out = Baz.new
      out.value = JtdCodegenE2e.from_json(String, data)
      out
    end

    def to_json
      JtdCodegenE2e.to_json(value)
    end
  end

  class Foo
    attr_accessor :value

    def self.from_json(data)
      out = Foo.new
      out.value = JtdCodegenE2e.from_json(Bar, data)
      out
    end

    def to_json
      JtdCodegenE2e.to_json(value)
    end
  end

  private

  def self.from_json(type, data)
    if data.nil? || [Object, TrueClass, Integer, Float, String].include?(type)
      data
    elsif type.is_a?(Array)
      data.map { |elem| from_json(type.first, elem) }
    elsif type.is_a?(Hash)
      data.transform_values { |elem| from_json(type.values.first, elem) }
    else
      type.from_json(data)
    end
  end

  def self.to_json(data)
    if data.nil? || [TrueClass, FalseClass, Integer, Float, String].include?(data.class)
      data
    elsif data.is_a?(Array)
      data.map { |elem| to_json(elem) }
    elsif data.is_a?(Hash)
      data.transform_values { |elem| to_json(elem) }
    else
      data.to_json
    end
  end
end
