# Code generated by jtd-codegen for Ruby v0.2.0

module JtdCodegenE2e

  class RootOverrideTypeDiscriminatorBaz < Object

    def self.from_json(data)
      out = RootOverrideTypeDiscriminatorBaz.new
      out.foo = "baz"
      out
    end

    def to_json
      data = { "foo" => "baz" }
      data
    end
  end

  class Root
    attr_accessor :override_elements_container
    attr_accessor :override_type_discriminator
    attr_accessor :override_type_enum
    attr_accessor :override_type_expr
    attr_accessor :override_type_properties
    attr_accessor :override_values_container

    def self.from_json(data)
      out = Root.new
      out.override_elements_container = JtdCodegenE2e::from_json(Array[String], data["override_elements_container"])
      out.override_type_discriminator = JtdCodegenE2e::from_json(Object, data["override_type_discriminator"])
      out.override_type_enum = JtdCodegenE2e::from_json(Object, data["override_type_enum"])
      out.override_type_expr = JtdCodegenE2e::from_json(Object, data["override_type_expr"])
      out.override_type_properties = JtdCodegenE2e::from_json(Object, data["override_type_properties"])
      out.override_values_container = JtdCodegenE2e::from_json(Hash[String, String], data["override_values_container"])
      out
    end

    def to_json
      data = {}
      data["override_elements_container"] = JtdCodegenE2e::to_json(override_elements_container)
      data["override_type_discriminator"] = JtdCodegenE2e::to_json(override_type_discriminator)
      data["override_type_enum"] = JtdCodegenE2e::to_json(override_type_enum)
      data["override_type_expr"] = JtdCodegenE2e::to_json(override_type_expr)
      data["override_type_properties"] = JtdCodegenE2e::to_json(override_type_properties)
      data["override_values_container"] = JtdCodegenE2e::to_json(override_values_container)
      data
    end
  end

  private

  def self.from_json(type, data)
    if data.nil? || [Object, TrueClass, Integer, Float, String].include?(type)
      data
    elsif type.is_a?(Array)
      data.map { |elem| from_json(type.first, elem) }
    elsif type.is_a?(Hash)
      data.transform_values { |elem| from_json(type.values.first, elem) }
    else
      type.from_json(data)
    end
  end

  def self.to_json(data)
    if data.nil? || [TrueClass, FalseClass, Integer, Float, String].include?(data.class)
      data
    elsif data.is_a?(Array)
      data.map { |elem| to_json(elem) }
    elsif data.is_a?(Hash)
      data.transform_values { |elem| to_json(elem) }
    else
      data.to_json
    end
  end
end
