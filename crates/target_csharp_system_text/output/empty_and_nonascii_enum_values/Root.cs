// Code generated by jtd-codegen for C# + System.Text.Json v0.2.1

using System;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace JtdCodegenE2E
{
    [JsonConverter(typeof(RootJsonConverter))]
    public enum Root
    {
        DefaultName,

        Foo,

        Foo0,

        Foo1,

        FooBar,

        FooBar0,

        Foo0bar,

        FooBar1,
    }
    public class RootJsonConverter : JsonConverter<Root>
    {
        public override Root Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string value = JsonSerializer.Deserialize<string>(ref reader, options);
            switch (value)
            {
                case "":
                    return Root.DefaultName;
                case "$foo":
                    return Root.Foo;
                case "0foo":
                    return Root.Foo0;
                case "_foo":
                    return Root.Foo1;
                case "foo\nbar":
                    return Root.FooBar;
                case "foo bar":
                    return Root.FooBar0;
                case "foo0bar":
                    return Root.Foo0bar;
                case "foo﷽bar":
                    return Root.FooBar1;
                default:
                    throw new ArgumentException(String.Format("Bad Root value: {0}", value));
            }
        }

        public override void Write(Utf8JsonWriter writer, Root value, JsonSerializerOptions options)
        {
            switch (value)
            {
                case Root.DefaultName:
                    JsonSerializer.Serialize<string>(writer, "", options);
                    return;
                case Root.Foo:
                    JsonSerializer.Serialize<string>(writer, "$foo", options);
                    return;
                case Root.Foo0:
                    JsonSerializer.Serialize<string>(writer, "0foo", options);
                    return;
                case Root.Foo1:
                    JsonSerializer.Serialize<string>(writer, "_foo", options);
                    return;
                case Root.FooBar:
                    JsonSerializer.Serialize<string>(writer, "foo\nbar", options);
                    return;
                case Root.FooBar0:
                    JsonSerializer.Serialize<string>(writer, "foo bar", options);
                    return;
                case Root.Foo0bar:
                    JsonSerializer.Serialize<string>(writer, "foo0bar", options);
                    return;
                case Root.FooBar1:
                    JsonSerializer.Serialize<string>(writer, "foo﷽bar", options);
                    return;
            }
        }
    }
}
